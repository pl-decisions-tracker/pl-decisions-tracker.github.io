---
import prisma from "../utils/prisma";
import type { YearOverviewType } from "../utils/types";
import CaseTypeYearCard from "./CaseTypeYearCard.astro";
import YearList from "./YearList.astro";

type Props = {
  year: number;
  countryParam: string;
};

const { year, countryParam } = Astro.props;
const data = await prisma.decisions.findMany({
  where: {
    updateObj: {
      timestamp: {
        lt: new Date(`${year + 1}-01-01`),
        gte: new Date(`${year}-01-01`),
      },
      dataUpdated: {
        gt: 0,
      },
    },
    countryObj:
      countryParam.toUpperCase() === "ALL"
        ? {}
        : {
            code: countryParam.toUpperCase(),
          },
  },
  include: {
    updateObj: true,
    institutionObj: true,
    caseTypeObj: true,
    decisionMarkerObj: true,
  },
  orderBy: [
    {
      updateObj: {
        timestamp: "asc",
      },
    },
    {
      caseType: "asc",
    },
    {
      decisionMarker: "asc",
    },
  ],
});
await prisma.$disconnect();

const decisionMarkerColors: Record<string, [number, number, number]> = {
  Inna: [0, 0, 0],
  "Procedury priorytetowe lub przyspieszone": [0, 0, 0],
  "Inna - pozytywna": [0, 0, 0],
  Pozytywna: [0x19, 0x87, 0x54],
  "Zgoda na pobyt tolerowany": [0, 0, 0],
  Negatywna: [0xdc, 0x35, 0x45],
  Wstrzymanie: [0, 0, 0],
  Umorzenie: [0x0d, 0xca, 0xf0],
  Wznowienie: [0, 0, 0],
  "Wnioski bezpodstawne": [0, 0, 0],
  "Ochrona uzupełniająca": [0xff, 0xc1, 0x07],
  "Wnioski niedopuszczalne": [0, 0, 0],
  "Zgoda na pobyt ze względów humanitarnych": [0, 0, 0],
  "Pozostawienie bez rozpoznania": [0, 0, 0],
};

interface helperType {
  // Case Type
  [key: string]: {
    institutions: {
      // Institution
      [key: string]: {
        // Decision
        [key: string]: {
          total: number[];
        };
      };
    };
    totals: {
      // Decision
      [key: string]: {
        total: number[];
      };
    };
    labels: number[];
  };
}

function throwExpression(errorMessage: string): never {
  throw new Error(errorMessage);
}

let helper: helperType = {};
let isCleanStart = false;
const finalObject = data.reduce((acc, curr) => {
  const currentCaseType = curr.caseTypeObj.type;
  const currentDecisionMarker = curr.decisionMarkerObj.description;
  const currentInstitution = curr.institutionObj.name;
  if (!acc.hasOwnProperty(currentCaseType)) {
    acc[currentCaseType] = {
      chartData: { labels: [], datasets: [] },
      institutions: {},
    };
    helper[currentCaseType] = { totals: {}, institutions: {}, labels: [] };
  }
  if (
    !acc[currentCaseType].chartData.datasets.some(
      (d) => d.label === currentDecisionMarker
    )
  ) {
    acc[currentCaseType].chartData.datasets.push({
      label: currentDecisionMarker,
      data: [],
      borderColor: `rgb(${decisionMarkerColors[currentDecisionMarker].join(
        ","
      )})`,
      backgroundColor: `rgba(${decisionMarkerColors[currentDecisionMarker].join(
        ","
      )}, 0.5)`,
    });
    helper[currentCaseType].totals[currentDecisionMarker] = {
      total: [],
    };
  }
  if (!acc[currentCaseType].institutions.hasOwnProperty(currentInstitution)) {
    acc[currentCaseType].institutions[currentInstitution] = {
      chartData: { labels: [], datasets: [] },
    };
    helper[currentCaseType].institutions[currentInstitution] = {};
  }
  if (
    !helper[currentCaseType].institutions[currentInstitution].hasOwnProperty(
      currentDecisionMarker
    )
  ) {
    helper[currentCaseType].institutions[currentInstitution][
      currentDecisionMarker
    ] = {
      total: [],
    };
  }
  if (
    !acc[currentCaseType].institutions[
      currentInstitution
    ].chartData.datasets.some((d) => d.label === currentDecisionMarker)
  ) {
    acc[currentCaseType].institutions[
      currentInstitution
    ].chartData.datasets.push({
      label: currentDecisionMarker,
      data: [],
      borderColor: `rgb(${decisionMarkerColors[currentDecisionMarker].join(
        ","
      )})`,
      backgroundColor: `rgba(${decisionMarkerColors[currentDecisionMarker].join(
        ","
      )}, 0.5)`,
    });
  }
  const currentDataset =
    acc[currentCaseType].chartData.datasets.find(
      (d) => d.label === currentDecisionMarker
    ) ??
    throwExpression(
      `Datasets field of acc.${currentCaseType}.chartData.datasets field does not have ${currentDecisionMarker} key`
    );
  const currentInstDataset =
    acc[currentCaseType].institutions[
      currentInstitution
    ].chartData.datasets.find((d) => d.label === currentDecisionMarker) ??
    throwExpression(
      `Datasets field of acc.${currentCaseType}.institutions.${currentInstitution}.chartData.datasets field does not have ${currentDecisionMarker} key`
    );
  let dataIndex = helper[currentCaseType].labels.findIndex(
    (l) => l === curr.updateObj.timestamp.valueOf()
  );
  if (dataIndex === -1) {
    dataIndex = helper[currentCaseType].labels.length;
    helper[currentCaseType].labels.push(curr.updateObj.timestamp.valueOf());
  }
  acc[currentCaseType].institutions[currentInstitution].chartData.labels =
    acc[currentCaseType].chartData.labels;
  if (
    isNaN(
      helper[currentCaseType].totals[currentDecisionMarker].total[dataIndex]
    )
  ) {
    helper[currentCaseType].totals[currentDecisionMarker].total[dataIndex] = 0;
  }
  helper[currentCaseType].totals[currentDecisionMarker].total[dataIndex] +=
    curr.count;
  if (
    isNaN(
      helper[currentCaseType].institutions[currentInstitution][
        currentDecisionMarker
      ].total[dataIndex]
    )
  ) {
    helper[currentCaseType].institutions[currentInstitution][
      currentDecisionMarker
    ].total[dataIndex] = 0;
  }
  helper[currentCaseType].institutions[currentInstitution][
    currentDecisionMarker
  ].total[dataIndex] += curr.count;
  // we can't use this for institution levels, as first data could appear much later then initial data point for this institution
  if (curr.updateObj.dataUpdated === 2) {
    if (
      !acc[currentCaseType].chartData.labels.includes(
        curr.updateObj.timestamp.valueOf()
      )
    ) {
      acc[currentCaseType].chartData.labels.push(
        curr.updateObj.timestamp.valueOf()
      );
    }
    // check that data point is number
    if (!isNaN(currentDataset.data[dataIndex])) {
      currentDataset.data[dataIndex] += curr.count;
    } else {
      currentDataset.data[dataIndex] = curr.count;
    }
    if (!isNaN(currentInstDataset.data[dataIndex])) {
      currentInstDataset.data[dataIndex] += curr.count;
    } else {
      currentInstDataset.data[dataIndex] = curr.count;
    }
    isCleanStart = true;
  } else {
    if (dataIndex === 0) {
      isCleanStart = false;
    } else {
      if (
        !acc[currentCaseType].chartData.labels.includes(
          curr.updateObj.timestamp.valueOf()
        )
      ) {
        acc[currentCaseType].chartData.labels.push(
          curr.updateObj.timestamp.valueOf()
        );
      }
      const dataAlignedIndex = isCleanStart ? dataIndex : dataIndex - 1;
      const prevSum =
        helper[currentCaseType].totals[currentDecisionMarker].total[
          dataIndex - 1
        ];
      const prevInstSum =
        helper[currentCaseType].institutions[currentInstitution][
          currentDecisionMarker
        ].total[dataIndex - 1];
      if (!isNaN(currentDataset.data[dataAlignedIndex])) {
        currentDataset.data[dataAlignedIndex] += curr.count;
      } else {
        currentDataset.data[dataAlignedIndex] =
          curr.count - (isNaN(prevSum) ? 0 : prevSum);
      }
      if (!isNaN(currentInstDataset.data[dataAlignedIndex])) {
        currentInstDataset.data[dataAlignedIndex] += curr.count;
      } else {
        currentInstDataset.data[dataAlignedIndex] =
          curr.count - (isNaN(prevInstSum) ? 0 : prevInstSum);
      }
    }
  }
  if (
    currentInstitution === "Wojewoda Wielkopolski" &&
    currentCaseType === "Pobyt rezydenta długoterminowego UE" &&
    currentDecisionMarker === "Pozytywna"
  ) {
    console.log(dataIndex, curr.dateId, curr.country, curr.count);
  }
  return acc;
}, {} as YearOverviewType);
---

<div>
  <YearList year={year} countryParam={countryParam} />
  <script
    is:inline="true"
    src="https://cdn.jsdelivr.net/npm/chart.js@4/dist/chart.umd.js"></script>
  <script
    is:inline="true"
    src="https://cdn.jsdelivr.net/npm/moment@2/moment.min.js"></script>
  <script
    is:inline="true"
    src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment@1/dist/chartjs-adapter-moment.min.js"
  ></script>
  <div class="d-flex justify-content-center flex-wrap">
    {
      Object.keys(finalObject).map((caseType) => (
        <CaseTypeYearCard
          caseType={caseType}
          caseTypeObject={finalObject[caseType]}
        />
      ))
    }
  </div>
</div>
